#! /usr/bin/env perl

use strict;
use warnings;

use Getopt::Std;

sub usage {
    warn @_, "\n" if @_;
    warn "usage: gen-version-dynamic [-i include] [-t topdir]\n";
    warn "       -i => #include this file in our output\n";
    warn "       -t => Use this topdir, default '..'\n";
    exit 1;
}

sub fail {
    my ($prefix, @err) = @_;

    for my $word (@err) {
        print qq(#error $prefix: "$_"\n) for split /\n/, $word;
    }
    exit 1;
}

my %opt = ( t => '..' );
usage unless getopts "i:t:", \%opt;
usage "$opt{t}: No such directory" unless -d $opt{t};

print "/* Generated by gen-version-dynamic */\n\n";
print qq(#include "$opt{i}"\n\n) if exists $opt{i};
for my $changelog (glob "$opt{t}/exe-*/debian/changelog") {
    (my $exe = $changelog) =~ s,.*exe-([^/]+)/debian/changelog,$1,;
    (my $EXE = uc $exe) =~ s,-,_,g;
    my $log = `dpkg-parsechangelog -l$changelog 2>/dev/null`;
    $log ||= 'Version: 0.0.0';
    if ($log =~ m{Version: (\S+)}s) {
        print qq(#define ${EXE}_DEBIAN_CHANGELOG_LATEST_VERSION "$1"\n);
    } else {
        print "#error Hint: Need to install dpkg-dev?\n";
        fail "Unexpected output from dpkg-parsechangelog -l $changelog", $log;
    }
}

chomp(my $commit = `git rev-parse HEAD 2>&1`);
if ($? == 0) {
    print qq(\n#define OPENDNSCACHE_LATEST_COMMIT_HASH "$commit"\n);
} else {
    fail "git rev-parse HEAD failed", $commit;
}
