/*
 * Generated by genxface.pl - DO NOT EDIT OR COMMIT TO SOURCE CODE CONTROL!
 */
#ifdef __cplusplus
extern "C" {
#endif


/**
 * Set per thread options.
 *
 * @param half_domaintagging Pointer to categories to be masked when HALF_DOMAINTAGGING orgflag is set
 */
void categorization_set_thread_options(const pref_categories_t *half_domaintagging) ;
void categorization_register(module_conf_t *m, const char *name, const char *fn, bool loadable) ;
const struct categorization * categorization_conf_get(const struct confset *set, module_conf_t m) ;
void categorization_refcount_inc(struct categorization *me) ;
void categorization_refcount_dec(struct categorization *me) ;
struct categorization * categorization_new(struct conf_loader *cl) ;
const uint8_t * categorization_match_appid(const struct categorization *me, const struct confset *conf, pref_categories_t *match,
                           uint32_t appid, const uint8_t *name, uint32_t polbits, pref_orgflags_t orgbits,
                           const pref_categories_t *find, struct xray *x) ;
const uint8_t * categorization_proxy_appid(const struct categorization *me, const struct confset *conf, uint32_t appid, const uint8_t *name,
                           uint32_t polbits, pref_orgflags_t orgbits, struct xray *x) ;
void categorization_by_domain(const struct categorization *me, const struct confset *conf, pref_categories_t *match,
                         const uint8_t *name, uint32_t polbits, pref_orgflags_t orgbits, struct xray *x) ;

/* COVERAGE EXCLUSION: due to a gcov bug */
void categorization_by_address(const struct categorization *me, const struct confset *conf, pref_categories_t *match,
                          const struct netaddr *addr, uint32_t polbits, pref_orgflags_t orgbits, struct xray *x) ;

/* COVERAGE EXCLUSION: due to a gcov bug */
bool categorization_might_proxy(const struct categorization *me, const struct confset *conf, const uint8_t *name, uint32_t polbits,
                           pref_orgflags_t orgbits, struct xray *x) ;

#ifdef __cplusplus
}
#endif
