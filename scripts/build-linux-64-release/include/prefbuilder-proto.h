/*
 * Generated by genxface.pl - DO NOT EDIT OR COMMIT TO SOURCE CODE CONTROL!
 */
#ifdef __cplusplus
extern "C" {
#endif

bool prefbuilder_allocident(struct prefbuilder *me, unsigned count) ;
void prefbuilder_init(struct prefbuilder *me, uint32_t flags, struct conf_loader *cl, void *user) ;
void prefbuilder_shrink(struct prefbuilder *me) ;
bool prefbuilder_alloclist(struct prefbuilder *me, unsigned count) ;

/**
 * Add a list to a prefbuilder
 *
 * @param elementtype One of APPLICATION, CIDR, DOMAIN, or URL
 * @param lp          List pointer
 */
bool prefbuilder_addlist(struct prefbuilder *me, ltype_t ltype, uint32_t listid, elementtype_t elementtype, list_pointer_t lp,
                    uint8_t bit) ;

/**
 * Discard a list, recording it so that bundles referring to it can also be discarded.
 *
 * @param me                       Pointer to a prefbuilder
 * @param ltype/listid/elementtype Identify the list to be discarded
 */
bool prefbuilder_disclist(struct prefbuilder *me, ltype_t ltype, uint32_t listid, elementtype_t elementtype) ;
bool prefbuilder_allocsettinggroup(struct prefbuilder *me, unsigned count) ;
bool prefbuilder_addsettinggroup(struct prefbuilder *me, settinggroup_idx_t sgidx, uint32_t sgid, uint32_t flags,
                            const pref_categories_t *blocked_categories, const pref_categories_t *nodecrypt_categories,
                            const pref_categories_t *warn_categories) ;
bool prefbuilder_allocorg(struct prefbuilder *me, unsigned count) ;
bool prefbuilder_addorg(struct prefbuilder *me, uint32_t id, pref_orgflags_t flags, const pref_categories_t *unmasked,
                   uint32_t retention, uint32_t warnperiod, uint32_t originid, uint32_t parentid) ;
bool prefbuilder_allocbundle(struct prefbuilder *me, unsigned count) ;
bool prefbuilder_addbundle(struct prefbuilder *me, actype_t actype, uint32_t bundleid, uint32_t priority, pref_bundleflags_t flags,
                      const pref_categories_t *cat, uint32_t settinggroup_ids[SETTINGGROUP_IDX_COUNT]) ;

/**
 * Attach a list to a bundle
 *
 * @param elementtypes A bit mask of the elementtypes allowed for this pref type
 */
bool prefbuilder_attach(struct prefbuilder *me, unsigned bitem, ltype_t ltype, uint32_t listid, unsigned elementtypes) ;

/*-
 * @param elementttypes A bit mask of the elementtypes allowed for this pref type
 */
bool prefbuilder_attachlist(struct prefbuilder *me, uint32_t bundleid, ltype_t ltype, uint32_t listid, unsigned elementtypes) ;
bool prefbuilder_addidentityforbundle(struct prefbuilder *me, uint32_t originid, uint32_t origintypeid, uint32_t orgid,
                                 actype_t actype, unsigned bitem) ;
bool prefbuilder_addidentity(struct prefbuilder *me, uint32_t originid, uint32_t origintypeid, uint32_t orgid, actype_t actype,
                        uint32_t bundleid) ;

/**
 * Consume only the lists from a built prefbuilder.
 *
 * @note This is used by the lists-org object.
 */
void prefbuilder_consumelists(struct prefbuilder *me, struct preflist **lists_out, unsigned *count_out) ;

/**
 * Consume a prefblock from a prefbuilder
 *
 * @note This function destroys the prefbuilder as a side effect, but it's safe to call prefbuilder_fini after if you want to
 */
struct prefblock * prefbuilder_consume(struct prefbuilder *me) ;
void prefbuilder_fini(struct prefbuilder *me) ;

#ifdef __cplusplus
}
#endif
