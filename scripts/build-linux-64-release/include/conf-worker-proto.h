/*
 * Generated by genxface.pl - DO NOT EDIT OR COMMIT TO SOURCE CODE CONTROL!
 */
#ifdef __cplusplus
extern "C" {
#endif


/**
 * Set per thread options used by conf worker threads
 *
 * @param reject_directory           Directory where files rejected by the loader are saved or NULL for no saving of rejects
 * @param lastgood_compression_level Compression level to use for last-good files
 * @param report_server              Report server netsock. If it's a.family set to 0, reporting will be disabled.
 *
 * @note A copy is made so that the options can be released immediately upon return, as loading can be fairly slow
 */
void conf_worker_set_thread_options(const char *reject_directory, int lastgood_compression_level,    /* COVERAGE EXCLUSION: Was covered by opendnscache tests */
                               const struct netsock *report_server) ;

/* COVERAGE EXCLUSION: Was covered by opendnscache tests */
void conf_report_load(const char *type, unsigned version) ;

/**
 * Load a single conf file
 *
 * @note This function can be called directly on startup from the config thread
 */
struct conf * conf_worker_load(struct conf *obase, struct conf_info *info, const struct preffile *segment) ;

/**
 * Process a single conf job.
 *
 * @note This function will be called directly from the config thread in the case where the conf thread count is 0
 */
bool conf_worker_process_one_job(bool block) ;
unsigned conf_worker_get_count(void) ;
unsigned conf_worker_get_target(void) ;

/**
 * Signal the conf_worker threads to gracefully terminate
 *
 * @note This initiates the terminations, but they happen asynchronously. thread_join the conf_worker thread to synchronize.
 */
void conf_worker_terminate(void) ;

/* COVERAGE EXCLUSION: Was covered by opendnscache tests */
bool conf_worker_under_spinlock(void) ;
void conf_worker_harvest_thread(const pthread_t thr) ;

/**
 * Set the desired number of worker threads
 *
 * @note A count of 1 will be treated as a count of 0. i.e. the main conf thread will do the work.
 */
void conf_worker_set_count(unsigned count) ;

/* Private function called by conf_initialize
 */
void conf_worker_initialize(const char *lastgood_directory, bool report_by_default) ;

/* Private function called by confset_unload to allow tests to free allocated memory
 */
void conf_worker_finalize(void) ;

#ifdef __cplusplus
}
#endif
