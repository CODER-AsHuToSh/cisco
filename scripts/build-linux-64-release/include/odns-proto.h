/*
 * Generated by genxface.pl - DO NOT EDIT OR COMMIT TO SOURCE CODE CONTROL!
 */
#ifdef __cplusplus
extern "C" {
#endif

const char * odns_host_id_to_str(struct odns *odns) ;
const char * odns_user_id_to_str(struct odns *odns) ;
const char * odns_device_id_to_str(struct odns *odns) ;
const char * odns_content(struct odns *odns) ;

/*
 * Initialize the ODNS structure for an active directory (AD) request
 *
 * @param me           ODNS structure to initialize
 * @param clientaddr   Address of the client that sent the message
 * @param org_id       Org id or 0 if none
 * @param asset_id     Asset id or 0 if none
 * @param ad_user_id   Pointer to the active directory user GUID or NULL if there is none
 * @param ad_host_id   Pointer to the active directory host GUID or NULL if there is none
 * @param ad_device_id Pointer to the active directory device id or NULL if there is none
 */
void odns_init(struct odns *me, const struct netaddr *clientaddr, uint32_t org_id, uint32_t asset_id,
          const struct kit_guid *ad_user_id, const struct kit_guid *ad_host_id, const struct kit_deviceid *ad_device_id) ;
uint16_t odns_get_formatted_size(struct odns *odns) ;

/*
 * Add the ODNS to a forwarder's EDNS message to a query, using 'default_odns_hdr' and the fields set in the odns structure.
 */
uint8_t * odns_format(struct odns *odns, uint16_t opt_length, uint8_t *opt_out) ;
uint8_t * odns_serialize(const struct odns *me, uint8_t *opt_ptr) ;
const char * odns_client_reporting_id_to_str(struct odns *odns, bool for_querylog) ;

#ifdef __cplusplus
}
#endif
