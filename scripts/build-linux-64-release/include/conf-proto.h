/*
 * Generated by genxface.pl - DO NOT EDIT OR COMMIT TO SOURCE CODE CONTROL!
 */
#ifdef __cplusplus
extern "C" {
#endif


/*-
 * Register a config file.
 *
 * @param type:      The type
 * @param seg:       For segmented configs, the requisite dispatch functions
 * @param name:      How it turns up in digest files and other diag messages
 * @param path:      The path relative to the conf_directory
 * @param loadable:  Whether it's immediately loadable or is being added to a registrar
 * @param loadflags: Passed to the loader.  LOADFLAGS_* flags are specific to the type
 */
module_conf_t conf_register(const struct conf_type *type, const struct conf_segment_ops *seg, const char *name, const char *path, bool loadable,
              uint32_t loadflags, const void *userdata, size_t userdatalen) ;
void conf_unregister(module_conf_t m) ;
void conf_setup(struct conf *base, const struct conf_type *type) ;
void conf_free(struct conf *me) ;
void conf_refcount_dec(struct conf *me, enum confset_free_method freehow) ;
void conf_refcount_inc(struct conf *me) ;
void conf_query_digest(const struct conf *base, const struct conf_info *info, const char *sub, void *v, void (*cb)(void *, const char *, const char *)) ;
void conf_query_modtime(const struct conf *base, const struct conf_info *info, void *v, void (*cb)(void *, const char *, const char *)) ;

/**
 * Called by any libuup function that uses options before using an option to update the current thread's copy of the options
 */
void conf_update_thread_options(void) ;

/**
 * Initialize the entire module and application startup
 *
 * @param confdir           Directory where config files are stored
 * @param lastgood          Directory where the last successfully loaded files are stored as a fallback
 * @param report_by_default True if load reports should be sent by default, false if not (e.g. in tests)
 * @param update            Function to call before using any options to make sure they're up to date (NULL to use defaults)
 */
void conf_initialize(const char *confdir, const char *lastgood, bool report_by_default, void (*update)(void)) ;
bool confset_fully_loaded(void) ;

/**
 * Register a function that will be called during the creation of a new confset, allowing it to be modified.
 *
 * @note Callbacks will be called in the context of the main config thread; allows generation/addition of secondary files
 */
bool conf_update_add_callback(void *v, void (*cb)(void *, struct confset *, const struct confset *)) ;
void conf_update_rm_callback(void *v) ;

/**
 * Function to load a single module, used in the application to force the options module to be loaded first.
 *
 * @param module The module identifier (e.g. CONF_OPTIONS).
 */
void confset_load_one(module_conf_t module) ;

/* Only called by the conf thread.  Workers need to confset_acquire()
 */
bool confset_load(uint64_t *delay_ms) ;

/**
 * Finalize the entire module
 *
 * @note Only (currently) used by test programs, so that they can prove all memory has been freed
 */
void confset_unload(void) ;
struct confset * confset_acquire(int *generation) ;
void confset_free(struct confset *set, enum confset_free_method freehow) ;
void confset_release(struct confset *set) ;
const struct conf * confset_get(const struct confset *set, module_conf_t m) ;
struct conf * confset_get_writable(struct confset *set, module_conf_t m) ;
void confset_foreach(const struct confset *set, void (*fn)(const struct conf *, const struct conf_info *, void *), void *data) ;

/**
 * Set the options used by the conf thread
 *
 * @param worker_count Number of independent worker threads, or 0 to load all config in the main conf thread
 */
void conf_set_global_options(unsigned worker_count) ;
void conf_registrar_init(struct conf_registrar *me) ;
bool conf_registrar_add(struct conf_registrar *me, module_conf_t m) ;
void conf_registrar_set_loadable(struct conf_registrar *me) ;
void conf_registrar_fini(struct conf_registrar *me) ;
const char * conf_name(const struct confset *set, module_conf_t m) ;

/*-
 * This function is used to convert conf filenames used by
 * config files that load other config files into a module
 * registration name
 *
 * For example this method would translate:
 *
 *   192.168.0.1.crt => 192-168-0-1-crt
 *   customer.opendns.com.crt => customer-opendns-com-crt
 */
const char * conf_fn2name(char name[PATH_MAX], const char *fn) ;

#ifdef __cplusplus
}
#endif
