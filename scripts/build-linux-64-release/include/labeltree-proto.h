/*
 * Generated by genxface.pl - DO NOT EDIT OR COMMIT TO SOURCE CODE CONTROL!
 */
#ifdef __cplusplus
extern "C" {
#endif


/**
 * Walk a labeltree, calling the callback on every node.
 *
 * @return true if the entire tree was walked
 */
bool labeltree_walk(struct labeltree *me, labeltree_walk_t visit, uint8_t *key, void *userdata) ;
struct labeltree * labeltree_new(void) ;
void labeltree_delete(struct labeltree *me, void (*callback)(void *)) ;
void labeltree_free(struct labeltree *me) ;

/**
 * Insert a name to the label tree if not already present
 *
 * @return Pointer to the value (possibly already set if the name was already present) or NULL on error.
 */
void ** labeltree_insert(struct labeltree *me, const uint8_t *key) ;

/**
 * Put a name in the label tree, overwriting the value if the name already exists
 *
 * @return Added value on new name, previous value if name was already in the tree, or NULL on error.
 */
void * labeltree_put(struct labeltree *me, const uint8_t *key, void *value) ;
const uint8_t * labeltree_search(struct labeltree *me, const uint8_t *key, unsigned flags, void **value_out, labeltree_walk_t visit, void *userdata) ;
const uint8_t * labeltree_suffix_get(struct labeltree *me, const uint8_t *key, unsigned flags) ;
void * labeltree_get_walk(struct labeltree *me, const uint8_t *key, unsigned flags, labeltree_walk_t visit, void *userdata) ;

/**
 * Search for a key in a labeltree, recording the path in a labeltree iterator
 *
 * @return The value if key was found, or NULL if there was no exact match
 */
const void * labeltree_search_iter(struct labeltree *me,  const uint8_t *key, struct labeltree_iter *iter_out) ;

/**
 * @return The value of the parent if found, or NULL if the parent was not matched in the last search
 */
const void * labeltree_iter_parent(struct labeltree_iter *me) ;

/**
 * @return The value of the previous non-NULL entry if found, or NULL if there is no previous entry
 */
const void * labeltree_iter_previous(struct labeltree_iter *me) ;

/**
 * Copy the DNS name stored in the iterator's path into *name_out
 */
uint8_t * labeltree_iter_get_name(struct labeltree_iter *me, uint8_t *name_out) ;

#ifdef __cplusplus
}
#endif
